#single linked list insertion and deletion
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Linkedlist:
    def __init__(self):
        self.head=None
    def printList(self):
        temp=self.head
        if not temp:
            print("List is empty")
            return
        else:
            print("Start: ",end=" ")
        while temp:
            print(temp.data,end=" -> ")
            temp=temp.next
        print("end.")
    def insert(self,data):
        new_node=Node(data)
        #if linkedlist is empty
        if self.head is None:
            self.head=new_node
        #if data is smaller than head
        elif self.head.data >= new_node.data:
            new_node.next = self.head
            self.head=new_node
        else:
            #locate the node before the insertion point
            current=self.head
            while current.next and new_node.data > current.next.data:
                current=current.next
            #Insertion
            new_node.next=current.next
            current.next=new_node
    def delete(self,key):
        #If list is empty
        if self.head is None:
            print("List is empty")
            return
        if self.head.data == key:
            self.head=self.head.next
            return
        current=self.head
        while current:
            if current.data == key:
                break
            previous = current
            current = current.next
            #If the key was not found
        if current is None:
            print("deletion error: key not found")
        else:
            previous.next = current.next
            
#__name is python special variable ued in creating module
if __name__=='__main__':
    #create object
    LL=Linkedlist()
    print('')
    #Insert some nodes
    LL.insert(10)
    LL.insert(12)
    LL.insert(8)
    LL.insert(11)
    LL.insert(10)
    LL.printList()
    LL.delete(12)
    LL.delete(8)
    LL.delete(10)
    LL.printList()


   # Creating own modules
   #fn is another file here it is acting as module
import fn
fn.printing()
print(__name__)

#lets say u have lot of functions in ur project
#u csn give all definitions at one place
#given all functions inside main easy to read
print("Before function")
def f1():
    print("f1")
def f2():
    print("f2")
def f3():
    print("f3")
if __name__=="__main__":
    f1()
    f2()
    f3()
print("name: ",__name__)

#creation of double linked list
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("Empty List")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
obj=dll()
n1=Node(10)
obj.head=n1
n2=Node(20)
n2.prev=n1
n1.next=n2
obj.display()

#Insertion at start of doublelinkedlist

class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
    def __init__(self):
        self.head=None
    def insert_start(self):
        n=Node(5)
        temp=self.head
        temp.prev=n
        n.next=temp
        self.head=n
        
    def display(self):
        if self.head is None:
            print("Empty List")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
obj=dll()
n1=Node(10)
obj.head=n1
n2=Node(20)
n2.prev=n1
n1.next=n2
obj.insert_start()
obj.display()


#Insert at end

class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
    def __init__(self):
        self.head=None
    def insert_end(self):
        n=Node(30)
        temp=self.head
        while temp.next is not None:
            temp=temp.next
        temp.next=n
        n.prev=temp
    def display(self):
        if self.head is None:
            print("Empty List")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
obj=dll()
n1=Node(10)
obj.head=n1
n2=Node(20)
n2.prev=n1
n1.next=n2
obj.insert_end()
obj.display()

#Insert at a position

class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
    def __init__(self):
        self.head=None
    def insert_pos(self,pos):
        n=Node(25)
        temp=self.head
        for i in range (1,pos-1):
            temp=temp.next
        n.prev=temp
        n.next=temp.next
        temp.next.prev=n
        temp.next=n
        
    def display(self):
        if self.head is None:
            print("Empty List")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
obj=dll()
n1=Node(10)
obj.head=n1
n2=Node(20)
n2.prev=n1
n1.next=n2
n3=Node(30)
n3.prev=n2
n2.next=n3
obj.insert_pos(3)
obj.display()

#delete at beginning
 def delete_beginning(self):
     temp=self.head
     self.head=temp.next
     temp.next=None

#deleting last node in dll:
def delete_end(self):
    temp=self.head.next
    prev=self.head
    while temp.next is not None:
        temp=temp.next
        pre=prev.next
    prev.next=None

#deleting at required position
def delete_position(self,pos):
     temp=self.head.next
     prev=self.head
     for i in range(1,pos-1):
         temp=temp.next
         prev=prev.next
     prev.next=temp.next
     temp.next=None

#Circular linkedlist
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Createlist:
    def __init__(self):
        self.head=Node(None)
        self.tail=Node(None)
        self.head.next=self.tail
        self.tail.next=self.head

        #Adding node at endof LL
    def add(self,data):
        newNode=Node(data)
        #Is empty
        if self.head.data is None:
            self.head=newNode
            self.tail=newNode
            newNode.next=self.head
        else:
            self.tail.next=newNode
            self.tail=newNode
            #it is cll with only 1 element so tail point to head
            self.tail.next=self.head
    def display(self):
        current=self.head
        if self.head is None:
            print("List is empty")
            return
        else:
            print("Nodes of circular linked list:  ")
            print(current.data,"-->")
            while(current.next != self.head):
                current=current.next
                print(current.data,"-->")
class CircularLinkedList:
    c1=Createlist()
    c1.add("S")
    c1.add("I")
    c1.add("R")
    c1.add("I")
    c1.display()
#creating own functions
def printing():
    print("hi")